import ramdom #biblioteca para mexer com números randomicos 
import socket # bilbioteca para criar conexoẽs 
import time # biblioteca para mexer com o tempo
import ipaddress # biblioteca para ips
from threading import Thread #biblioteca para realizar multthread
import struct #traduz binario para números inteiros


SIGNAL = True


def checksum(source_string):
    sum  = 0 
    count_to = (len(source_string) / 2) *2
    count = 0
    while count < count_to:
        this_val = ord(source_string[count + 1]) * 256 + ord(source_string[count])
        sum = sum + this_val
        sum = sum & 0xffffffff
        count = count + 2
    if count_to < len(source_string):
        sum = sum + ord(source_string[len(source_string) - 1])
        sum  = sum & 0xffffffff
    sum = (sum >> 16) + (sum & 0xffff)
    sum  = sum + (sum >> 16)
    answer = ~sum
    answer = answer & 0xffff
    
def create_packet(id):
    header = struct.pack('bbHHh',8,0,0,id,1)
    data  =192 * 'Q'
    my_checksum  =  checksum (header + data)
    return header + data

def ping(addr, timeout = 1):
    try:
        my_socket = socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
    except Exception as e:
        print (e)
    packet_id  = int((id(timeout) * random.random()) % 65535)
    packet = create_packet(packet_id)
    my_socket.connect ((addr, 80))